#!/usr/bin/env bash

# A simple bash prompt by ic0n
#
# Copyright (c) 2017 Lynn Jackson
# Released under the MIT license.
#


if tput setaf 1 &> /dev/null; then
    # Reset the shell from our `if` check
    tput sgr0 &> /dev/null

    # Save common color actions
    bold="$(tput bold)"
    reset="$(tput sgr0)"
    dim="$(tput dim)"

    # Check if term support blink
    if tput blink &> /dev/null; then
        blink="$(tput blink)"
    else
        blink=""
    fi

    # If the terminal supports at least 256 colors, write out our 256 color based set
    if [[ "$(tput colors)" -ge 256 ]] &> /dev/null; then
        color_std_yellow="$(tput setaf 229)" # NORMAL ORANGE
        color_base_0="$(tput setab 200)"
        color_betw_0="$(tput setab 128)"
        color_base_1="$(tput setab 134)"
        color_betw_1="$(tput setab 97)"
        color_base_2="$(tput setab 98)"
        color_betw_2="$(tput setab 61)"
        color_base_3="$(tput setab 62)"
        color_base_4="$(tput setab 60)"
        color_base_5="$(tput setab 190)" # GREEN BACKGROUND
        color_betw_5="$(tput setab 201)"
        color_base_00="$(tput setaf 17)"
        color_base_01="$bold$(tput setaf 7)" # BOLD WHITE
        color_error_0="$(tput setab 90)"
        color_error_1="$(tput setab 161)"
        color_error_00="$(tput setaf 160)"
    else
        # Otherwise, use colors from our set of 8
        color_bold_blue="$bold$(tput setaf 4)" # BOLD BLUE
        color_bold_white="$bold$(tput setaf 7)" # BOLD WHITE
        color_bold_cyan="$bold$(tput setaf 6)" # BOLD CYAN
        color_bold_green="$bold$(tput setaf 2)" # BOLD GREEN
        color_bold_yellow="$bold$(tput setaf 3)" # BOLD YELLOW
        color_bold_red="$bold$(tput setaf 1)" # BOLD RED
        color_bg_green_0="$(tput setab 2)" # GREEN BACKGROUND
        color_bg_green_1="$(tput setab 2)" # GREEN BACKGROUND
        color_bg_red_0="$(tput setab 1)" # GREEN BACKGROUND
        color_bg_red_1="$(tput setab 1)" # GREEN BACKGROUND
        color_bg_grey="$(tput setab 0)" # GREY BACKGROUND
        color_std_grey="$(tput setaf 7)" # NORMAL GREY
        color_std_yellow="$(tput setaf 7)" # NORMAL ORANGE
    fi

else
    reset="\033[m"
    color_bold_blue="\033[1;34m" # BLUE
    color_bold_white="\033[1;37m" # WHITE
    color_bold_cyan="\033[1;36m" # CYAN
    color_bold_green="\033[1;32m" # GREEN
    color_bold_yellow="\033[1;33m" # YELLOW
    color_bold_red="\033[1;31m" # RED
    color_bg_green_0="\033[1;32m" # GREEN BACKGROUND
    color_bg_green_1="\033[1;32m" # GREEN BACKGROUND
    color_bg_red_0="\033[1;31m" # GREEN BACKGROUND
    color_bg_red_1="\033[1;31m" # GREEN BACKGROUND
    color_bg_grey="\033[1;30m" # GREY BACKGROUND
    color_std_grey="\033[1;37m" # NORMAL GREY
    color_std_yellow="\033[1;37m" # NORMAL ORANGE

fi

# Define the default prompt terminator character '$'
if [[ "$UID" == 0  ]]; then
    prompt_symbol="#"
else
    prompt_symbol="\$"
fi

function dir_trim() {
    # Only show ellipses for directory trees greater than LENGTH
    # Otherwise use the default pwd as the current \w replacement
    local pre= NAME="$1" LENGTH="$2"
    IFS=/ read -ra __ <<< "${NAME#/}"
    local path_length="${#__[@]}"

    if [ "$NAME" != "${NAME#$HOME/}" ] || [ -z "${NAME#$HOME}" ]; then
        local pre='~' NAME="${NAME#$HOME}" LENGTH="$(( $LENGTH + 1 ))";
    else
        local pre="/${__[0]}" NAME="${NAME#$pre}";
    fi

    if [ "$path_length" -gt "$LENGTH" ]; then
        local NAME="/..."
        for (( i="$(( $path_length - $LENGTH + 2 ))"; i<"$path_length" ; i++ ))
        do
            local NAME+="/${__[$i]}"
        done
    fi

    echo "$pre$NAME"
}

N_PROMPT_DIRTRIM=4

function prompt_update () {
    # Check if the last command is correct
    local err_code="$?"

    start=$(gdate +%s.%N)

    if [ "$err_code" -eq 0  ]; then
        local checker="$color_base_4$color_base_01"
    else
        #checker="\[$color_error_1\] \[$color_error_0\]\[$color_error_00\]$err_code"
        local checker="$color_error_0$color_error_00"
    fi

    local all_jobs_count="$(IFS=$'\n'; set -f; set -- $(jobs -p); echo $#)"

    # Check if there're some jobs
    if [ "$all_jobs_count" -eq 0 ]; then
        local jobs_indi="⬡ "
    else
        local stopped_jobs_count="$(IFS=$'\n'; set -f; set -- $(jobs -sp); echo $#)"
        if [ "$stopped_jobs_count" -eq 0 ]; then
            local jobs_indi=$(printf "\[$color_base_0\]▶ \[$color_bold_white\]%d " $all_jobs_count)
        elif [ "$stopped_jobs_count" -eq "$all_jobs_count" ]; then
            local jobs_indi=$(printf "\[$color_base_0\]▨ \[$color_bold_white\]%d " $all_jobs_count)
        else
            local jobs_indi=$(printf "\[$color_base_0\]⬢ \[$color_bold_white\]%d " $all_jobs_count)
        fi
    fi

    if [[ -n "${SSH_CLIENT-}${SSH2_CLIENT-}${SSH_TTY-}" ]]; then
        local ssh_host=" \h "
        local ssh_user=" \u "
    else
        local ssh_host=""
        local ssh_user=""
    fi



    export PS1="\
\[$color_std_yellow\]\[$color_betw_5\]$jobs_indi\
\[$reset\]\[$color_bg_grey\]\
\[$color_base_00\]\[$color_betw_0\]$ssh_host\[$color_base_1\]\
\[$color_base_00\]\[$color_betw_1\]$ssh_user\[$color_base_2\]\
\[$color_base_00\]\[$color_betw_2\] \[$color_base_3\]$(dir_trim "$PWD" $N_PROMPT_DIRTRIM) \
\[$reset\]\[$checker\] \
$prompt_symbol\
 \[$reset\]"

    end=$(gdate +%s.%N)
    runtime=$(echo "$end - $start" | bc)
    echo "time used:$runtime"
}

PROMPT_COMMAND=prompt_update
